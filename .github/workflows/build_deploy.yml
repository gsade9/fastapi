name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: testing

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_HOSTNAME: localhost
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}_test
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..15}; do
            if PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} pg_isready -h localhost -p 5432 -U ${{ secrets.DATABASE_USERNAME }}; then
              echo "Postgres is ready!"
              break
            else
              echo "Waiting for postgres..."
              sleep 2
            fi
          done

      - name: Create test database manually if not exists
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          echo "Checking if database exists..."
          EXISTS=$(PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} psql -h localhost -U ${{ secrets.DATABASE_USERNAME }} -p 5432 -tAc "SELECT 1 FROM pg_database WHERE datname='${{ secrets.DATABASE_NAME }}_test'")
          if [ "$EXISTS" != "1" ]; then
            echo "Database does not exist. Creating..."
            PGPASSWORD=${{ secrets.DATABASE_PASSWORD }} psql -h localhost -U ${{ secrets.DATABASE_USERNAME }} -p 5432 -c "CREATE DATABASE ${{ secrets.DATABASE_NAME }}_test;"
          else
            echo "Database already exists."
          fi

      - name: Run Pytest
        run: pytest
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
     
      

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    steps:
      - name: Pulling Git repo
        uses: actions/checkout@v2

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      - name: Set Heroku stack to container
        run: heroku stack:set container --app ${{ secrets.HEROKU_APP_NAME }}

      - name: Deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true

      - name: Deploy to Ubuntu Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            cd /home/gowtham/app
            git fetch origin
            git reset --hard origin/main
            git clean -fd
            echo ${{ secrets.PROD_PASSWORD }} | sudo -S systemctl restart api


      
# - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Docker whoami
      #   run: docker info

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v1

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     builder: ${{ steps.buildx.outputs.name }}
      #     push: true
      #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi1:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

      #login to our ubuntu
      #cd/app/src
      #git pull
      #systemctl restart api